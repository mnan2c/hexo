title: 几个常见消息队列的对比

tags:
  - 类库&中间件

categories:
  - 类库&中间件

---
分布式系统中,我们广泛运用消息中间件进行系统间的数据交换,便于异步解耦。

## 1. 常用消息中间件及简介
1. Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，
一开始的目的就是用于日志收集和传输。
0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，
适合产生大量数据的互联网服务的数据收集业务。

2. RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。
AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。
AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，
对性能和吞吐量的要求还在其次。

3. RocketMQ是阿里开源的消息中间件，它是纯Java开发，
具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。
RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，
它对消息的可靠传输及事务性做了优化，
目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、
binglog分发等场景。

## 2. 性能对比
在服务端处理同步发送的性能上，Kafka>RocketMQ>RabbitMQ。
1. Kafka是高吞吐量消息中间件的行业老大。
这主要取决于它的队列模式保证了写磁盘的过程是线性IO。
2. RocketMQ的消息写入内存后即返回ack，由单独的线程专门做刷盘的操作，
所有的消息均是顺序写文件。
3. RabbitMQ支持AMQP协议，实现非常重量级，为了保证消息的可靠性在吞吐量上做了取舍。

## 3. 选型要点概述
1. 功能维度
  - 多租户：也可以称为多重租赁技术，是一种软件架构技术，主要用来实现多用户的环境下公用相同的系统或程序组件，并且仍可以确保各用户间数据的隔离性。
  - 消息顺序性：指保证消息有序。
  - 消息幂等性：每条消息肯定会被传输一次且仅一次。
2. 性能维度
  - Kafka 在开启幂等、事务功能的时候会使其性能降低，RabbitMQ 在开启 rabbitmq_tracing 插件的时候也会极大的影响其性能。
  - 从功能维度上来说，RabbitMQ 的优势要大于 Kafka，但是 Kafka 的吞吐量要比 RabbitMQ 高出 1 至 2 个数量级
